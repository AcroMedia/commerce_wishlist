<?php

/**
 * Base class for commerce discount tests.
 */
class CommerceWishlistTestBase extends CommerceBaseTestCase {

  /**
   * Don't need most of default core modules.
   */
  protected $profile = 'minimal';

  /**
   * Dummy commerce_product and related product node.
   */
  protected $product;
  protected $product_node;

  /**
   * User accounts for testing.
   */
  protected $store_admin;
  protected $store_customer;

  /**
   * Allows submodules to define themselves for setup.
   *
   * @var string
   */
  protected $sub_module;

  /**
   * Overrides CommerceBaseTestCase::permissionBuilder().
   */
  protected function permissionBuilder($set) {
    $permissions = parent::permissionBuilder($set);

    switch ($set) {
      case 'store admin':
        $permissions[] = 'configure wish lists';
        break;
      case 'store customer':
        $permissions[] = 'manage own wish list';
        break;
    }

    return $permissions;
  }

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    // Enable all commerce modules + commerce_wishlist.
    $modules = parent::setUpHelper('all');

    $modules[] = 'commerce_wishlist';

    parent::setUp($modules);

    // User creation for different operations.
    $this->store_admin = $this->createStoreAdmin();
    $this->store_customer = $this->createStoreCustomer();

    // Create a dummy product.
    $this->product = $this->createDummyProduct('PROD-01', 'Product One', 1000);
    $this->product2 = $this->createDummyProduct('PROD-02', 'Product Two', 2000);

    // Create a dummy product display content type.
    $this->createDummyProductDisplayContentType();

    // Create a product display node.
    $this->product_node = $this->createDummyProductNode(array(
      $this->product->product_id,
      $this->product2->product_id,
    ), 'Product One node');

    // Set the default country to US.
    variable_set('site_default_country', 'US');

    // Set up the module so that we can see the effects.
    variable_set('commerce_wishlist_element', 'button');
    variable_set('commerce_wishlist_product_types', array('product' => 'product'));

  }

}

/**
 * Testing commerce wishlist UI and functionality.
 */
class CommerceWishlistTest extends CommerceWishlistTestBase {
  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'Wish list',
      'description' => 'Test Wish list UI and functionality',
      'group' => 'Commerce Wish list',
    );
  }

  /**
   * Access to commerce wishlist admin.
   */
  public function testCommerceWishlistUI() {
    // Login with store admin.
    $this->drupalLogin($this->store_admin);
    // Check the access to the profiles listing.
    $this->drupalGet('admin/commerce/config/wishlist');
    $this->assertResponse(200, 'The store admin has access to wishlist configuration.');

    // Login with customer.
    $this->drupalLogin($this->store_customer);
    // Check the access to the profiles listing.
    $this->drupalGet('admin/commerce/config/wishlist');
    $this->assertResponse(403, 'The store customer has no access to wishlist configuration.');

    // Test the UI.
    $this->drupalGet('user/' . $this->store_customer->uid . '/wishlist');
    $this->assertResponse(200, 'The customer can access the wishlist view.');
    $this->assertText('There are no items in this wish list.');

    // Load a product page.
    $this->drupalGet('node/' . $this->product_node->uid);
    // Make sure Add to Wishlist is on the page.
    $this->assertRaw('Add to Wishlist');
    // Submit the button.
    $this->drupalPost('node/' . $this->product_node->uid, array(), t('Add to Wishlist'));
    // Upon refresh, the item should be in our wishlist.
    $this->assertText('Already in your wishlist.');
    // Make sure our message shows up.
    $this->assertRaw(t('Product <em>@product</em> has been added to <a href="@url">your wishlist</a>.', array(
      '@product' => $this->product->title,
      '@url' => url('user/' . $this->store_customer->uid . '/wishlist', array('absolute' => TRUE)),
    )), 'Added to wishlist message is present.');

    // Make sure the product is actually in the cart.
    $this->drupalGet('user/' . $this->store_customer->uid . '/wishlist');
    // Our remove link.
    $this->assertLink('Remove');
    // This form shouldn't have any form elements in it.
    $this->assertNoText('Already in your wishlist.', 'Wishlist form elements are not present.');
    // Our product, linked to it's node, should be visible.
    $this->assertLink($this->product->title);
    $this->assertRaw(l($this->product->title, 'node/' . $this->product_node->nid), 'Item links to the original node.');

    // Remove it from the wishlist.
    $this->clickLink('Remove');
    // Ensure that there are no items in the wishlist.
    $this->assertText('There are no items in this wish list.', 'No more products in the listing.');
  }

  public function testCommerceWishlistOrderVisibility() {
    // @todo make sure that Wish lists aren't shown regular order views or
    // accidentally used as carts.
  }


  /**
   * Anonymous usage of the Wishlist module.
   */
  public function testCommerceWishlistAnonymousUI() {
    // Load a product page.
    $this->drupalGet('node/' . $this->product_node->uid);
    // Make sure Add to Wishlist is on the page.
    $this->assertRaw('Add to Wishlist');
    // Submit the button.
    $this->drupalPost('node/' . $this->product_node->uid, array(), t('Add to Wishlist'));
    // Upon refresh, the item should be in our wishlist.
    $this->assertText('Already in your wishlist.');

  }

  public function testCommerceWishlistBlock() {

  }

}
