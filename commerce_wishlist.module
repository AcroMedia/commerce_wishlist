<?php

/**
 * @file
 * Implements the wishlist system and add to wishlist features.
 */

use Drupal\commerce_order\Entity\OrderInterface;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_entity_base_field_info().
 */
function commerce_wishlist_entity_base_field_info(EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'commerce_order') {
    $fields['wishlist'] = BaseFieldDefinition::create('boolean')
      ->setLabel(t('Wishlist'))
      ->setSettings([
        'on_label' => t('Yes'),
        'off_label' => t('No'),
      ])
      ->setDisplayOptions('form', [
        'type' => 'boolean_checkbox',
        'settings' => [
          'display_label' => TRUE,
        ],
        'weight' => 20,
      ])
      ->setDisplayConfigurable('form', TRUE)
      ->setDefaultValue(FALSE);

    return $fields;
  }
}

/**
 * Implements hook_entity_bundle_create().
 *
 * Creates an 'add_to_wishlist' form display for each new line item type.
 *
 * @todo: Determine if we need an add_to_wishlist display mode for line item
 *        types.
 */
function commerce_wishlist_entity_bundle_create($entity_type_id, $bundle) {
  if ($entity_type_id == 'commerce_line_item' && !\Drupal::isConfigSyncing()) {
    $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
    $form_display = $storage->load('commerce_line_item.' . $bundle . '.add_to_wishlist');
    if (!$form_display) {
      /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
      $form_display = $storage->create([
        'targetEntityType' => 'commerce_line_item',
        'bundle' => $bundle,
        'mode' => 'add_to_wishlist',
        'status' => TRUE,
      ]);
      // Hide the unit price by default.
      $form_display->removeComponent('unit_price');
      $form_display->save();
    }
  }
}

/**
 * Implements hook_entity_type_build().
 */
function commerce_wishlist_entity_type_build(array &$entity_types) {
  $entity_types['commerce_line_item']->setFormClass('add_to_wishlist', '\Drupal\commerce_wishlist\Form\AddToWishlistForm');
}


/**
 * Implements hook_user_login().
 */
function commerce_wishlist_user_login($account) {
  \Drupal::service('commerce_wishlist.wishlist_assignment')->assignAll($account);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Removes deleted wishlists from the anonymous user's session.
 */
function commerce_wishlist_commerce_order_delete(OrderInterface $order) {
  if (!empty($order->wishlist)) {
    \Drupal::service('commerce_wishlist.wishlist_session')->deleteCartId($order->id());
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for 'entity_form_display_edit_form'.
 *
 * Hides irrelevant purchased_entity widgets on the add_to_wishlist line item
 * form display.
 *
 * @todo: Unnecessary for wishlist, but part of the scaffolding effort for now.
 */
function commerce_wishlist_form_entity_form_display_edit_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $entity */
  $entity = $form_state->getFormObject()->getEntity();
  if ($form['#entity_type'] == 'commerce_line_item' && $entity->getMode() == 'add_to_cart') {
    $options = &$form['fields']['purchased_entity']['plugin']['type']['#options'];
    unset($options['entity_reference_autocomplete_tags']);
    unset($options['entity_reference_autocomplete']);
    unset($options['inline_entity_form_complex']);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for 'commerce_order_form'.
 */
function commerce_wishlist_form_commerce_order_form_alter(array &$form, FormStateInterface $form_state) {
  if (isset($form['wishlist'])) {
    /** @var \Drupal\commerce_order\Entity\OrderInterface $order */
    $order = $form_state->getFormObject()->getEntity();
    if ($order->getState()->value == 'draft') {
      // Move the cart element to the bottom of the meta sidebar container.
      $form['wishlist']['#group'] = 'meta';
      $form['wishlist']['#weight'] = 101;
    }
    else {
      // Only draft orders can be wishlists.
      $form['wishlist']['#type'] = 'hidden';
      $form['#default_value'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for 'commerce_order_type_form'.
 */
function commerce_wishlist_form_commerce_order_type_form_alter(array &$form, FormStateInterface $form_state) {
  $order_type = $form_state->getFormObject()->getEntity();
  $wishlist_form_view = $order_type->getThirdPartySetting('commerce_wishlist', 'wishlist_form_view', 'commerce_cart_form');
  $refresh_mode = $order_type->getThirdPartySetting('commerce_wishlist', 'refresh_mode', 'owner_only');
  $refresh_frequency = $order_type->getThirdPartySetting('commerce_wishlist', 'refresh_frequency', 30);
  // Prepare a list of views tagged 'commerce_wishlist_form'.
  $view_storage = \Drupal::entityTypeManager()->getStorage('view');
  $available_form_views = [];
  foreach ($view_storage->loadMultiple() as $view) {
    if (strpos($view->get('tag'), 'commerce_wishlist_form') !== FALSE) {
      $available_form_views[$view->id()] = $view->label();
    }
  }

  $form['commerce_wishlist'] = [
    '#type' => 'details',
    '#title' => t('Wishlist settings'),
    '#weight' => 5,
    '#open' => TRUE,
    '#collapsible' => TRUE,
  ];
  $form['commerce_wishlist']['wishlist_form_view'] = [
    '#type' => 'select',
    '#title' => t('Wishlist form view'),
    '#options' => $available_form_views,
    '#default_value' => $wishlist_form_view,
  ];

  $form['commerce_wishlist']['refresh_intro'] = [
    '#markup' => '<p>' . t('These settings let you control how wishlists are refreshed, the process during which line item prices are recalculated.') . '</p>',
  ];
  $form['commerce_wishlist']['refresh_mode'] = [
    '#type' => 'radios',
    '#title' => t('Wishlist refresh mode'),
    '#options' => [
      'always' => t('Refresh a wishlist when it is loaded regardless of who it belongs to.'),
      'owner_only' => t('Only refresh a wishlist when it is loaded if it belongs to the current user.'),
    ],
    '#default_value' => $refresh_mode,
  ];
  $form['commerce_wishlist']['refresh_frequency'] = [
    '#type' => 'textfield',
    '#title' => t('Wishlist refresh frequency'),
    '#description' => t('Wishlists will only be refreshed if more than the specified number of seconds have passed since they were last refreshed.'),
    '#default_value' => $refresh_frequency,
    '#required' => TRUE,
    '#size' => 10,
    '#field_suffix' => t('seconds'),
  ];
  $form['actions']['submit']['#submit'][] = 'commerce_wishlist_order_type_form_submit';
}

/**
 * Form submission handler for 'commerce_order_type_form'.
 */
function commerce_wishlist_order_type_form_submit($form, FormStateInterface $form_state) {
  $settings = &$form_state->getValue('commerce_wishlist');
  $order_type = $form_state->getFormObject()->getEntity();
  $order_type->setThirdPartySetting('commerce_wishlist', 'refresh_mode', $settings['refresh_mode']);
  $order_type->setThirdPartySetting('commerce_wishlist', 'refresh_frequency', $settings['refresh_frequency']);
  $order_type->save();
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 *
 * Shows in the add-to-cart summary whether or not the wishlist is enabled.
 */
function commerce_wishlist_field_formatter_settings_summary_alter(&$summary, $context) {
  // Append a message to the summary when foo_formatter has
  // my_setting set to TRUE for the current view mode.
  if ($context['formatter']->getPluginId() == 'commerce_add_to_cart') {
    if ($context['formatter']->getThirdPartySetting('commerce_wishlist', 'show_wishlist')) {
      $summary[] = t('Wishlist enabled.');
    } else {
      $summary[] = t('Wishlist disabled.');
    }
  }
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * Extends the add to cart formatter form with a show wishlist button.
 */
function commerce_wishlist_field_formatter_third_party_settings_form($plugin, $field_definition, $view_mode, $form, $form_state) {
  $element = array();

  if ($plugin->getPluginId() == 'commerce_add_to_cart') {
    $element['show_wishlist'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show wishlist button'),
      '#default_value' => $plugin->getThirdPartySetting('commerce_wishlist', 'show_wishlist'),
    );
    $element['ajax_wishlist'] = array(
      '#type' => 'checkbox',
      '#title' => t('Display "Add to wishlist" as an ajax link'),
      '#default_value' => $plugin->getThirdPartySetting('commerce_wishlist', 'ajax_wishlist'),
    );
    $element['weight_wishlist'] = array(
      '#type' => 'number',
      '#title' => t('Change the weight of the wishlist button.'),
      '#default_value' => $plugin->getThirdPartySetting('commerce_wishlist', 'weight_wishlist'),
    );
    $element['label_wishlist'] = array(
      '#type' => 'textfield',
      '#title' => t('Override the wishlist button label'),
      '#default_value' => $plugin->getThirdPartySetting('commerce_wishlist', 'label_wishlist'),
    );
  }
  return $element;
}
