<?php

/**
 * @file
 * Defines the Wishlist entity and associated features.
 */

use Drupal\commerce_wishlist\Entity\WishlistInterface;
use Drupal\Core\Entity\Entity\EntityViewDisplay;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Field\FormatterInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\Core\Session\AnonymousUserSession;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_user_login().
 */
function commerce_wishlist_user_login($account) {
  /** @var \Drupal\commerce_wishlist\WishlistProviderInterface $wishlist_provider */
  $wishlist_provider = \Drupal::service('commerce_wishlist.wishlist_provider');
  /** @var \Drupal\commerce_wishlist\WishlistAssignmentInterface $wishlist_assignment */
  $wishlist_assignment = \Drupal::service('commerce_wishlist.wishlist_assignment');

  // Assign the anonymous user's wishlists to the logged-in account.
  // This will only affect the wishlists that are in the user's session.
  $anonymous = new AnonymousUserSession();
  $wishlists = $wishlist_provider->getWishlists($anonymous);
  $wishlist_assignment->assignMultiple($wishlists, $account);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 *
 * Removes deleted wishlists from the anonymous user's session.
 */
function commerce_wishlist_commerce_wishlist_delete(WishlistInterface $wishlist) {
  /** @var \Drupal\commerce_wishlist\WishlistSessionInterface $wishlist_session */
  $wishlist_session = \Drupal::service('commerce_wishlist.wishlist_session');
  $wishlist_session->deleteWishlistId($wishlist->id());
}

/**
 * Implements hook_theme().
 */
function commerce_wishlist_theme($existing, $type, $theme, $path) {
  return [
    'commerce_wishlist' => [
      'render element' => 'elements',
    ],
    'commerce_wishlist__user' => [
      'base hook' => 'commerce_wishlist',
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_field_widget_form_alter().
 *
 * - Changes the label of the purchasable_entity field to the label of the
 *   target type (e.g. 'Product variation').
 * - Forbids editing the purchasable_entity once the wishlist item is no longer new.
 */
function commerce_wishlist_field_widget_form_alter(&$element, FormStateInterface $form_state, $context) {
  /** @var \Drupal\Core\Field\FieldItemListInterface $context ['items'] */
  /** @var \Drupal\Core\Field\FieldDefinitionInterface $field_definition */
  $field_definition = $context['items']->getFieldDefinition();
  $field_name = $field_definition->getName();
  $entity_type = $field_definition->getTargetEntityTypeId();
  if ($field_name == 'purchasable_entity' && $entity_type == 'commerce_wishlist_item') {
    if (!empty($element['target_id']['#target_type'])) {
      $target_type = \Drupal::entityTypeManager()
        ->getDefinition($element['target_id']['#target_type']);
      $element['target_id']['#title'] = $target_type->getLabel();
      if (!$context['items']->getEntity()->isNew()) {
        $element['#disabled'] = TRUE;
      }
    }
  }
}

/**
 * Prepares variables for wishlist templates.
 *
 * Default template: commerce-wishlist.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing rendered fields.
 *   - attributes: HTML attributes for the containing element.
 */
function template_preprocess_commerce_wishlist(&$variables) {
  /** @var Drupal\commerce_wishlist\Entity\WishlistInterface $wishlist */
  $wishlist = $variables['elements']['#commerce_wishlist'];

  $variables['wishlist_entity'] = $wishlist;
  $variables['wishlist'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['wishlist'][$key] = $variables['elements'][$key];
  }
}

/**
 * Implements hook_theme_suggestions_commerce_wishlist().
 */
function commerce_wishlist_theme_suggestions_commerce_wishlist(array $variables) {
  return _commerce_entity_theme_suggestions('commerce_wishlist', $variables);
}

/**
 * Adds the default wishlist_items field to an wishlist type.
 *
 * wishlist items can't be a base field because the Views integration is broken.
 * Instead, it is created as a configurable field for each wishlist type.
 *
 * @param \Drupal\commerce_wishlist\Entity\WishlistTypeInterface $wishlist_type
 *   The wishlist type.
 */
function commerce_wishlist_add_wishlist_items_field($wishlist_type) {
  $field_storage = FieldStorageConfig::loadByName('commerce_wishlist', 'wishlist_items');
  $field = FieldConfig::loadByName('commerce_wishlist', $wishlist_type->id(), 'wishlist_items');
  if (empty($field_storage)) {
    $field_storage = FieldStorageConfig::create([
      'field_name' => 'wishlist_items',
      'entity_type' => 'commerce_wishlist',
      'type' => 'entity_reference',
      'cardinality' => FieldStorageConfig::CARDINALITY_UNLIMITED,
      'settings' => [
        'target_type' => 'commerce_wishlist_item',
      ],
      'locked' => TRUE,
      'translatable' => FALSE,
    ]);
    $field_storage->save();
  }
  if (empty($field)) {
    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $wishlist_type->id(),
      'label' => 'Wishlist items',
      'required' => TRUE,
      'settings' => [
        'handler' => 'default',
        'handler_settings' => [],
      ],
      'translatable' => FALSE,
    ]);
    $field->save();

    $view_display = commerce_get_entity_display('commerce_wishlist', $wishlist_type->id(), 'view');
    $view_display->setComponent('wishlist_items', [
      'type' => 'commerce_wishlist_item_table',
      'weight' => 0,
    ]);
    $view_display->save();

    $form_display = commerce_get_entity_display('commerce_wishlist', $wishlist_type->id(), 'form');
    $form_display->setComponent('wishlist_items', [
      'type' => 'inline_entity_form_complex',
      'weight' => 0,
      'settings' => [
        'override_labels' => TRUE,
        'label_singular' => 'wishlist item',
        'label_plural' => 'wishlist items',
      ],
    ]);
    $form_display->save();
  }
}

/**
 * Implements hook_views_data_alter().
 */
function commerce_wishlist_views_data_alter(array &$data) {
  $data['commerce_wishlist_item']['edit_quantity']['field'] = [
    'title' => t('Wishlist quantity text field'),
    'help' => t('Adds a text field for editing the quantity.'),
    'id' => 'commerce_wishlist_item_edit_quantity',
  ];

  $data['commerce_wishlist_item']['remove_button']['field'] = [
    'title' => t('Remove button'),
    'help' => t('Adds a button for removing the wishlist item.'),
    'id' => 'commerce_wishlist_item_remove_button',
  ];

  $data['commerce_wishlist_item']['move_to_cart']['field'] = [
    'title' => t('Move to cart button'),
    'help' => t('Adds a button for moving the wishlist item to the shopping cart.'),
    'id' => 'commerce_wishlist_item_move_to_cart',
  ];
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for 'commerce_product_variation_type_form'.
 */
function commerce_wishlist_form_commerce_product_variation_type_form_alter(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\commerce_product\Entity\ProductVariationTypeInterface $commerce_product_variation_type */
  $commerce_product_variation_type = $form_state->getFormObject()->getEntity();
  $wishlist_item_type = $commerce_product_variation_type->getThirdPartySetting('commerce_wishlist', 'wishlist_item_type', 'default');

  // Prepare the list of wishlist item types.
  $wishlist_item_types = \Drupal::entityTypeManager()->getStorage('commerce_wishlist_item_type')
    ->loadMultiple();
  $wishlist_item_types = array_map(function($type) {
    /** @var \Drupal\commerce_wishlist\Entity\WishlistItemTypeInterface $wishlist_item_type */
    return $type->label();
  }, $wishlist_item_types);

  $form['commerce_wishlist'] = [
    '#type' => 'details',
    '#title' => t('Wishlist settings'),
    '#weight' => 5,
    '#open' => TRUE,
    '#collapsible' => TRUE,
  ];
  $form['commerce_wishlist']['wishlist_item_type'] = [
    '#type' => 'select',
    '#title' => t('Wishlist item type'),
    '#options' => $wishlist_item_types,
    '#default_value' => $wishlist_item_type,
  ];
  $form['actions']['submit']['#submit'][] = 'commerce_wishlist_product_variation_type_form_submit';
}

/**
 * Form submission handler for 'commerce_product_variation_type_form'.
 */
function commerce_wishlist_product_variation_type_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\commerce_product\Entity\ProductVariationTypeInterface $commerce_product_variation_type */
  $commerce_product_variation_type = $form_state->getFormObject()->getEntity();
  $settings = $form_state->getValue('commerce_wishlist');
  $commerce_product_variation_type->setThirdPartySetting('commerce_wishlist', 'wishlist_item_type', $settings['wishlist_item_type']);
  $commerce_product_variation_type->save();
}

/**
 * Implements hook_field_formatter_third_party_settings_form().
 *
 * Extends the add to cart formatter form with a show wishlist button.
 */
function commerce_wishlist_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
  $element = [];

  if ($plugin->getPluginId() == 'commerce_add_to_cart') {
    $element['show_wishlist'] = [
      '#type' => 'checkbox',
      '#title' => t('Show wishlist button'),
      '#default_value' => $plugin->getThirdPartySetting('commerce_wishlist', 'show_wishlist'),
    ];
    $element['weight_wishlist'] = [
      '#type' => 'number',
      '#title' => t('Change the weight of the wishlist button.'),
      '#default_value' => $plugin->getThirdPartySetting('commerce_wishlist', 'weight_wishlist', 99),
    ];
    $element['label_wishlist'] = [
      '#type' => 'textfield',
      '#title' => t('Override the wishlist button label'),
      '#default_value' => $plugin->getThirdPartySetting('commerce_wishlist', 'label_wishlist'),
    ];
  }
  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary_alter().
 *
 * Shows in the add-to-cart summary whether or not the wishlist is enabled.
 */
function commerce_wishlist_field_formatter_settings_summary_alter(&$summary, $context) {
  /** @var \Drupal\Core\Field\FormatterInterface $formatter */
  $formatter = $context['formatter'];
  if ($formatter->getPluginId() == 'commerce_add_to_cart') {
    if ($formatter->getThirdPartySetting('commerce_wishlist', 'show_wishlist')) {
      $summary[] = t('Wishlist enabled.');
    }
    else {
      $summary[] = t('Wishlist disabled.');
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for 'commerce_order_item_add_to_cart_form'.
 */
function commerce_wishlist_form_commerce_order_item_add_to_cart_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // The product entity is thankfully available in the form storage.
  $form_data = $form_state->getStorage();
  /** @var \Drupal\commerce_product\Entity\ProductInterface $product */
  $product = $form_data['product'];

  // Grab the view mode third party settings.
  $display = EntityViewDisplay::collectRenderDisplay($product, $form_data['view_mode']);
  $display_content = $display->get('content');
  $settings = !empty($display_content['variations']['third_party_settings']['commerce_wishlist']) ? $display_content['variations']['third_party_settings']['commerce_wishlist'] : [];

  // Add the button
  if (!empty($settings['show_wishlist'])) {
    $label = $settings['label_wishlist'] ?: t('Add to wishlist');
    $weight = ($settings['weight_wishlist'] != "") ? $settings['weight_wishlist'] : 99;
    $form['actions']['wishlist'] = [
      '#type' => 'submit',
      '#value' => $label,
      '#weight' => $weight,
      '#submit' => ['commerce_wishlist_add_to_wishlist_form_submit'],
    ];
  }
}

/**
 * Form submit handler for add-to-wishlist actions.
 *
 * Note that since we must fire this function off using a static form_alter call,
 * we have no choice but to bring in the services and objects that we need.
 * Normally we would create a class and use dependency injection to get at all
 * of this context. We are very open to a better way of implementing this hijack
 * of the add to cart form.
 *
 * @param array $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @throws \Exception
 */
function commerce_wishlist_add_to_wishlist_form_submit($form, FormStateInterface $form_state) {

  // Grab all objects that we need.
  /** @var \Drupal\commerce_cart\Form\AddToCartForm $add_to_cart_form */
  $add_to_cart_form = $form_state->getFormObject();
  /** @var \Drupal\commerce_order\Entity\OrderItem $order_item */
  $order_item = $add_to_cart_form->buildEntity($form, $form_state);
  $purchasable_entity = $order_item->getPurchasedEntity();
  /** @var \Drupal\commerce_wishlist\WishlistManagerInterface $wishlist_manager */
  $wishlist_manager = \Drupal::service('commerce_wishlist.wishlist_manager');
  /** @var \Drupal\commerce_wishlist\WishlistProviderInterface $wishlist_provider */
  $wishlist_provider = \Drupal::service('commerce_wishlist.wishlist_provider');
  /** @var \Drupal\commerce_wishlist\Resolver\WishlistTypeResolverInterface $wishlist_type_resolver */
  $wishlist_type_resolver = \Drupal::service('commerce_wishlist.chain_wishlist_type_resolver');

  // Create the wishlist item.
  $wishlist_item = $wishlist_manager->createWishlistItem($purchasable_entity, $order_item->getQuantity());

  // Determine the wishlist type to use.
  $wishlist_type = $wishlist_type_resolver->resolve($wishlist_item);

  // Use existing or create a new wishlist.
  $wishlist = $wishlist_provider->getWishlist($wishlist_type);
  if (!$wishlist) {
    $wishlist = $wishlist_provider->createWishlist($wishlist_type);
  }
  $wishlist_manager->addWishlistItem($wishlist, $wishlist_item, $form_state->get(['settings', 'combine']));

  drupal_set_message(t('@entity added to @wishlist-link.', [
    '@entity' => $purchasable_entity->label(),
    '@wishlist-link' => Link::createFromRoute(t('your wishlist', [], ['context' => 'wishlist link']), 'commerce_wishlist.page')->toString(),
  ]));
}
